// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

/*
Package match is a generated protocol buffer package.

It is generated from these files:
	match.proto

It has these top-level messages:
	Match
	Participant
*/
package match

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Maps to struct defined in structs/match.go
type Match struct {
	GameID       int64          `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	SeasonID     int32          `protobuf:"varint,2,opt,name=SeasonID" json:"SeasonID,omitempty"`
	GameCreation int64          `protobuf:"varint,3,opt,name=GameCreation" json:"GameCreation,omitempty"`
	GameDuration int32          `protobuf:"varint,4,opt,name=GameDuration" json:"GameDuration,omitempty"`
	Participants []*Participant `protobuf:"bytes,5,rep,name=Participants" json:"Participants,omitempty"`
	Bans         []int64        `protobuf:"varint,6,rep,packed,name=Bans" json:"Bans,omitempty"`
	GameMode     string         `protobuf:"bytes,7,opt,name=GameMode" json:"GameMode,omitempty"`
	MapID        int32          `protobuf:"varint,8,opt,name=MapID" json:"MapID,omitempty"`
	GameType     string         `protobuf:"bytes,9,opt,name=GameType" json:"GameType,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Match) GetGameID() int64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *Match) GetSeasonID() int32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Match) GetGameCreation() int64 {
	if m != nil {
		return m.GameCreation
	}
	return 0
}

func (m *Match) GetGameDuration() int32 {
	if m != nil {
		return m.GameDuration
	}
	return 0
}

func (m *Match) GetParticipants() []*Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Match) GetBans() []int64 {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *Match) GetGameMode() string {
	if m != nil {
		return m.GameMode
	}
	return ""
}

func (m *Match) GetMapID() int32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

func (m *Match) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

type Participant struct {
	SummonerName string `protobuf:"bytes,1,opt,name=SummonerName" json:"SummonerName,omitempty"`
	AccountID    int64  `protobuf:"varint,2,opt,name=AccountID" json:"AccountID,omitempty"`
	ProfileIcon  int32  `protobuf:"varint,3,opt,name=ProfileIcon" json:"ProfileIcon,omitempty"`
	SummonerID   int64  `protobuf:"varint,4,opt,name=SummonerID" json:"SummonerID,omitempty"`
	ChampionID   int64  `protobuf:"varint,5,opt,name=ChampionID" json:"ChampionID,omitempty"`
	TeamID       int32  `protobuf:"varint,6,opt,name=TeamID" json:"TeamID,omitempty"`
	Winner       bool   `protobuf:"varint,7,opt,name=Winner" json:"Winner,omitempty"`
}

func (m *Participant) Reset()                    { *m = Participant{} }
func (m *Participant) String() string            { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()               {}
func (*Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Participant) GetSummonerName() string {
	if m != nil {
		return m.SummonerName
	}
	return ""
}

func (m *Participant) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *Participant) GetProfileIcon() int32 {
	if m != nil {
		return m.ProfileIcon
	}
	return 0
}

func (m *Participant) GetSummonerID() int64 {
	if m != nil {
		return m.SummonerID
	}
	return 0
}

func (m *Participant) GetChampionID() int64 {
	if m != nil {
		return m.ChampionID
	}
	return 0
}

func (m *Participant) GetTeamID() int32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Participant) GetWinner() bool {
	if m != nil {
		return m.Winner
	}
	return false
}

func init() {
	proto.RegisterType((*Match)(nil), "Match")
	proto.RegisterType((*Participant)(nil), "Participant")
}

func init() { proto.RegisterFile("match.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0xe9, 0xb2, 0xd6, 0xf5, 0xeb, 0x4e, 0x41, 0x24, 0x88, 0x48, 0xd8, 0xa9, 0xa7, 0x21,
	0xfa, 0x04, 0xba, 0x80, 0xe4, 0x30, 0x19, 0xd9, 0xc0, 0x73, 0xac, 0x91, 0x05, 0x4c, 0x52, 0xb2,
	0xec, 0xe0, 0x93, 0xf8, 0x7c, 0xbe, 0x89, 0x24, 0xeb, 0xd6, 0xf6, 0xd6, 0xdf, 0x2f, 0xdf, 0xf7,
	0xa5, 0xf9, 0x27, 0x50, 0x19, 0x19, 0x9a, 0xfd, 0xb2, 0xf5, 0x2e, 0xb8, 0xc5, 0xef, 0x04, 0xf2,
	0x75, 0x64, 0x7c, 0x03, 0xc5, 0xab, 0x34, 0x8a, 0x33, 0x92, 0xd1, 0xac, 0x46, 0xa2, 0x23, 0x7c,
	0x0b, 0xb3, 0xad, 0x92, 0x07, 0x67, 0x39, 0x23, 0x13, 0x9a, 0xd5, 0xb9, 0xb8, 0x30, 0x5e, 0xc0,
	0x3c, 0x56, 0xad, 0xbc, 0x92, 0x41, 0x3b, 0x4b, 0x50, 0xea, 0x1c, 0xb9, 0x73, 0x0d, 0x3b, 0xfa,
	0x53, 0xcd, 0x34, 0xcd, 0x18, 0x39, 0xfc, 0x00, 0xf3, 0x8d, 0xf4, 0x41, 0x37, 0xba, 0x95, 0x36,
	0x1c, 0x48, 0x4e, 0x51, 0x5d, 0x3d, 0xce, 0x97, 0x03, 0x29, 0x46, 0x15, 0x18, 0xc3, 0xf4, 0x45,
	0xda, 0x03, 0x29, 0x28, 0xaa, 0x91, 0x48, 0xdf, 0xf1, 0x4f, 0xe3, 0xd4, 0xb5, 0xfb, 0x54, 0xe4,
	0x8a, 0x66, 0x75, 0x29, 0x2e, 0x8c, 0xaf, 0xe3, 0x31, 0x5b, 0xce, 0xc8, 0x2c, 0x6d, 0x7f, 0x82,
	0x73, 0xc7, 0xee, 0xa7, 0x55, 0xa4, 0xec, 0x3b, 0x22, 0x2f, 0xfe, 0x32, 0xa8, 0x06, 0x5b, 0xc6,
	0x73, 0x6c, 0x8f, 0xc6, 0x38, 0xab, 0xfc, 0x9b, 0x34, 0x2a, 0xa5, 0x54, 0x8a, 0x91, 0xc3, 0x77,
	0x50, 0x3e, 0x37, 0x8d, 0x3b, 0xda, 0xd0, 0x85, 0x85, 0x44, 0x2f, 0x30, 0x85, 0x6a, 0xe3, 0xdd,
	0x97, 0xfe, 0x56, 0xbc, 0xe9, 0xc2, 0xca, 0xc5, 0x50, 0xe1, 0x7b, 0x80, 0xf3, 0x3c, 0xce, 0x52,
	0x52, 0x48, 0x0c, 0x4c, 0x5c, 0x5f, 0xed, 0xa5, 0x69, 0x75, 0xba, 0x8d, 0xfc, 0xb4, 0xde, 0x9b,
	0x78, 0x87, 0x3b, 0x25, 0x0d, 0x67, 0xa4, 0x48, 0xc3, 0x3b, 0x8a, 0xfe, 0x5d, 0x5b, 0xab, 0x7c,
	0xca, 0x65, 0x26, 0x3a, 0xfa, 0x28, 0xd2, 0x23, 0x78, 0xfa, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x55,
	0xe3, 0x74, 0xf9, 0x13, 0x02, 0x00, 0x00,
}
