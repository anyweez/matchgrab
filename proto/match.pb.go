// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/match.proto

/*
Package match is a generated protocol buffer package.

It is generated from these files:
	proto/match.proto

It has these top-level messages:
	Match
	Participant
	ParticipantStats
*/
package match

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Maps to struct defined in structs/match.go
type Match struct {
	GameID       int64          `protobuf:"varint,1,opt,name=GameID" json:"GameID,omitempty"`
	SeasonID     int32          `protobuf:"varint,2,opt,name=SeasonID" json:"SeasonID,omitempty"`
	GameCreation int64          `protobuf:"varint,3,opt,name=GameCreation" json:"GameCreation,omitempty"`
	GameDuration int32          `protobuf:"varint,4,opt,name=GameDuration" json:"GameDuration,omitempty"`
	Participants []*Participant `protobuf:"bytes,5,rep,name=Participants" json:"Participants,omitempty"`
	Bans         []int64        `protobuf:"varint,6,rep,packed,name=Bans" json:"Bans,omitempty"`
	GameMode     string         `protobuf:"bytes,7,opt,name=GameMode" json:"GameMode,omitempty"`
	MapID        int32          `protobuf:"varint,8,opt,name=MapID" json:"MapID,omitempty"`
	GameType     string         `protobuf:"bytes,9,opt,name=GameType" json:"GameType,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Match) GetGameID() int64 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *Match) GetSeasonID() int32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Match) GetGameCreation() int64 {
	if m != nil {
		return m.GameCreation
	}
	return 0
}

func (m *Match) GetGameDuration() int32 {
	if m != nil {
		return m.GameDuration
	}
	return 0
}

func (m *Match) GetParticipants() []*Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Match) GetBans() []int64 {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *Match) GetGameMode() string {
	if m != nil {
		return m.GameMode
	}
	return ""
}

func (m *Match) GetMapID() int32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

func (m *Match) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

type Participant struct {
	SummonerName string            `protobuf:"bytes,1,opt,name=SummonerName" json:"SummonerName,omitempty"`
	AccountID    int64             `protobuf:"varint,2,opt,name=AccountID" json:"AccountID,omitempty"`
	ProfileIcon  int32             `protobuf:"varint,3,opt,name=ProfileIcon" json:"ProfileIcon,omitempty"`
	SummonerID   int64             `protobuf:"varint,4,opt,name=SummonerID" json:"SummonerID,omitempty"`
	ChampionID   int64             `protobuf:"varint,5,opt,name=ChampionID" json:"ChampionID,omitempty"`
	TeamID       int32             `protobuf:"varint,6,opt,name=TeamID" json:"TeamID,omitempty"`
	Winner       bool              `protobuf:"varint,7,opt,name=Winner" json:"Winner,omitempty"`
	Stats        *ParticipantStats `protobuf:"bytes,8,opt,name=Stats" json:"Stats,omitempty"`
}

func (m *Participant) Reset()                    { *m = Participant{} }
func (m *Participant) String() string            { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()               {}
func (*Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Participant) GetSummonerName() string {
	if m != nil {
		return m.SummonerName
	}
	return ""
}

func (m *Participant) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *Participant) GetProfileIcon() int32 {
	if m != nil {
		return m.ProfileIcon
	}
	return 0
}

func (m *Participant) GetSummonerID() int64 {
	if m != nil {
		return m.SummonerID
	}
	return 0
}

func (m *Participant) GetChampionID() int64 {
	if m != nil {
		return m.ChampionID
	}
	return 0
}

func (m *Participant) GetTeamID() int32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Participant) GetWinner() bool {
	if m != nil {
		return m.Winner
	}
	return false
}

func (m *Participant) GetStats() *ParticipantStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ParticipantStats struct {
	Spell1                          int32   `protobuf:"varint,1,opt,name=Spell1" json:"Spell1,omitempty"`
	Spell2                          int32   `protobuf:"varint,2,opt,name=Spell2" json:"Spell2,omitempty"`
	Masteries                       []int32 `protobuf:"varint,4,rep,packed,name=masteries" json:"masteries,omitempty"`
	Runes                           []int32 `protobuf:"varint,5,rep,packed,name=Runes" json:"Runes,omitempty"`
	Items                           []int32 `protobuf:"varint,6,rep,packed,name=Items" json:"Items,omitempty"`
	Kills                           int32   `protobuf:"varint,7,opt,name=Kills" json:"Kills,omitempty"`
	Deaths                          int32   `protobuf:"varint,8,opt,name=Deaths" json:"Deaths,omitempty"`
	Assists                         int32   `protobuf:"varint,9,opt,name=Assists" json:"Assists,omitempty"`
	LargestKillingSpree             int32   `protobuf:"varint,10,opt,name=LargestKillingSpree" json:"LargestKillingSpree,omitempty"`
	LargestMultiKill                int32   `protobuf:"varint,11,opt,name=LargestMultiKill" json:"LargestMultiKill,omitempty"`
	KillingSprees                   int32   `protobuf:"varint,12,opt,name=KillingSprees" json:"KillingSprees,omitempty"`
	LongestTimeSpentLiving          int32   `protobuf:"varint,13,opt,name=LongestTimeSpentLiving" json:"LongestTimeSpentLiving,omitempty"`
	DoubleKills                     int32   `protobuf:"varint,14,opt,name=DoubleKills" json:"DoubleKills,omitempty"`
	TripleKills                     int32   `protobuf:"varint,15,opt,name=TripleKills" json:"TripleKills,omitempty"`
	QuadraKills                     int32   `protobuf:"varint,16,opt,name=QuadraKills" json:"QuadraKills,omitempty"`
	PentaKills                      int32   `protobuf:"varint,17,opt,name=PentaKills" json:"PentaKills,omitempty"`
	UnrealKills                     int32   `protobuf:"varint,18,opt,name=UnrealKills" json:"UnrealKills,omitempty"`
	TotalDamageDealt                int32   `protobuf:"varint,19,opt,name=TotalDamageDealt" json:"TotalDamageDealt,omitempty"`
	MagicDamageDealt                int32   `protobuf:"varint,20,opt,name=MagicDamageDealt" json:"MagicDamageDealt,omitempty"`
	PhysicalDamageDealt             int32   `protobuf:"varint,21,opt,name=PhysicalDamageDealt" json:"PhysicalDamageDealt,omitempty"`
	TrueDamageDealt                 int32   `protobuf:"varint,22,opt,name=TrueDamageDealt" json:"TrueDamageDealt,omitempty"`
	LargestCriticalStrike           int32   `protobuf:"varint,23,opt,name=LargestCriticalStrike" json:"LargestCriticalStrike,omitempty"`
	TotalDamageDealtToChampions     int32   `protobuf:"varint,24,opt,name=TotalDamageDealtToChampions" json:"TotalDamageDealtToChampions,omitempty"`
	MagicDamageDealtToChampions     int32   `protobuf:"varint,25,opt,name=MagicDamageDealtToChampions" json:"MagicDamageDealtToChampions,omitempty"`
	PhysicalDamageDealtToChampions  int32   `protobuf:"varint,26,opt,name=PhysicalDamageDealtToChampions" json:"PhysicalDamageDealtToChampions,omitempty"`
	TrueDamageDealtToChampions      int32   `protobuf:"varint,27,opt,name=TrueDamageDealtToChampions" json:"TrueDamageDealtToChampions,omitempty"`
	TotalHeal                       int32   `protobuf:"varint,28,opt,name=TotalHeal" json:"TotalHeal,omitempty"`
	TotalUnitsHealed                int32   `protobuf:"varint,29,opt,name=TotalUnitsHealed" json:"TotalUnitsHealed,omitempty"`
	DamageSelfMitigated             int32   `protobuf:"varint,30,opt,name=DamageSelfMitigated" json:"DamageSelfMitigated,omitempty"`
	DamageDealtToObjectives         int32   `protobuf:"varint,31,opt,name=DamageDealtToObjectives" json:"DamageDealtToObjectives,omitempty"`
	DamageDealtToTurrets            int32   `protobuf:"varint,32,opt,name=DamageDealtToTurrets" json:"DamageDealtToTurrets,omitempty"`
	VisionScore                     int32   `protobuf:"varint,33,opt,name=VisionScore" json:"VisionScore,omitempty"`
	TimeCCingOthers                 int32   `protobuf:"varint,34,opt,name=TimeCCingOthers" json:"TimeCCingOthers,omitempty"`
	TotalDamageTaken                int32   `protobuf:"varint,35,opt,name=TotalDamageTaken" json:"TotalDamageTaken,omitempty"`
	MagicalDamageTaken              int32   `protobuf:"varint,36,opt,name=MagicalDamageTaken" json:"MagicalDamageTaken,omitempty"`
	PhysicalDamageTaken             int32   `protobuf:"varint,37,opt,name=PhysicalDamageTaken" json:"PhysicalDamageTaken,omitempty"`
	TrueDamageTaken                 int32   `protobuf:"varint,38,opt,name=TrueDamageTaken" json:"TrueDamageTaken,omitempty"`
	GoldEarned                      int32   `protobuf:"varint,39,opt,name=GoldEarned" json:"GoldEarned,omitempty"`
	GoldSpent                       int32   `protobuf:"varint,40,opt,name=GoldSpent" json:"GoldSpent,omitempty"`
	TurretKills                     int32   `protobuf:"varint,41,opt,name=TurretKills" json:"TurretKills,omitempty"`
	InhibitorKills                  int32   `protobuf:"varint,42,opt,name=InhibitorKills" json:"InhibitorKills,omitempty"`
	TotalMinionsKilled              int32   `protobuf:"varint,43,opt,name=TotalMinionsKilled" json:"TotalMinionsKilled,omitempty"`
	NeutralMinionsKilled            int32   `protobuf:"varint,44,opt,name=NeutralMinionsKilled" json:"NeutralMinionsKilled,omitempty"`
	NeutralMinionsKilledTeamJungle  int32   `protobuf:"varint,45,opt,name=NeutralMinionsKilledTeamJungle" json:"NeutralMinionsKilledTeamJungle,omitempty"`
	NeutralMinionsKilledEnemyJungle int32   `protobuf:"varint,46,opt,name=NeutralMinionsKilledEnemyJungle" json:"NeutralMinionsKilledEnemyJungle,omitempty"`
	TotalTimeCrowdControlDealt      int32   `protobuf:"varint,47,opt,name=TotalTimeCrowdControlDealt" json:"TotalTimeCrowdControlDealt,omitempty"`
	ChampLevel                      int32   `protobuf:"varint,48,opt,name=ChampLevel" json:"ChampLevel,omitempty"`
	VisionWardsBoughtInGame         int32   `protobuf:"varint,49,opt,name=VisionWardsBoughtInGame" json:"VisionWardsBoughtInGame,omitempty"`
	SightWardsBoughtInGame          int32   `protobuf:"varint,50,opt,name=SightWardsBoughtInGame" json:"SightWardsBoughtInGame,omitempty"`
	WardsPlaced                     int32   `protobuf:"varint,51,opt,name=WardsPlaced" json:"WardsPlaced,omitempty"`
	WardsKilled                     int32   `protobuf:"varint,52,opt,name=WardsKilled" json:"WardsKilled,omitempty"`
	FirstBloodKill                  bool    `protobuf:"varint,53,opt,name=FirstBloodKill" json:"FirstBloodKill,omitempty"`
	FirstBloodAssist                bool    `protobuf:"varint,54,opt,name=FirstBloodAssist" json:"FirstBloodAssist,omitempty"`
	FirstTowerKill                  bool    `protobuf:"varint,55,opt,name=FirstTowerKill" json:"FirstTowerKill,omitempty"`
	FirstTowerAssist                bool    `protobuf:"varint,56,opt,name=FirstTowerAssist" json:"FirstTowerAssist,omitempty"`
	FirstInhibitorKill              bool    `protobuf:"varint,57,opt,name=FirstInhibitorKill" json:"FirstInhibitorKill,omitempty"`
	FirstInhibitorAssist            bool    `protobuf:"varint,58,opt,name=FirstInhibitorAssist" json:"FirstInhibitorAssist,omitempty"`
	CombatPlayerScore               int32   `protobuf:"varint,59,opt,name=CombatPlayerScore" json:"CombatPlayerScore,omitempty"`
	ObjectivePlayerScore            int32   `protobuf:"varint,60,opt,name=ObjectivePlayerScore" json:"ObjectivePlayerScore,omitempty"`
	TotalPlayerScore                int32   `protobuf:"varint,61,opt,name=TotalPlayerScore" json:"TotalPlayerScore,omitempty"`
	TotalScoreRank                  int32   `protobuf:"varint,62,opt,name=TotalScoreRank" json:"TotalScoreRank,omitempty"`
}

func (m *ParticipantStats) Reset()                    { *m = ParticipantStats{} }
func (m *ParticipantStats) String() string            { return proto.CompactTextString(m) }
func (*ParticipantStats) ProtoMessage()               {}
func (*ParticipantStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParticipantStats) GetSpell1() int32 {
	if m != nil {
		return m.Spell1
	}
	return 0
}

func (m *ParticipantStats) GetSpell2() int32 {
	if m != nil {
		return m.Spell2
	}
	return 0
}

func (m *ParticipantStats) GetMasteries() []int32 {
	if m != nil {
		return m.Masteries
	}
	return nil
}

func (m *ParticipantStats) GetRunes() []int32 {
	if m != nil {
		return m.Runes
	}
	return nil
}

func (m *ParticipantStats) GetItems() []int32 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ParticipantStats) GetKills() int32 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *ParticipantStats) GetDeaths() int32 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *ParticipantStats) GetAssists() int32 {
	if m != nil {
		return m.Assists
	}
	return 0
}

func (m *ParticipantStats) GetLargestKillingSpree() int32 {
	if m != nil {
		return m.LargestKillingSpree
	}
	return 0
}

func (m *ParticipantStats) GetLargestMultiKill() int32 {
	if m != nil {
		return m.LargestMultiKill
	}
	return 0
}

func (m *ParticipantStats) GetKillingSprees() int32 {
	if m != nil {
		return m.KillingSprees
	}
	return 0
}

func (m *ParticipantStats) GetLongestTimeSpentLiving() int32 {
	if m != nil {
		return m.LongestTimeSpentLiving
	}
	return 0
}

func (m *ParticipantStats) GetDoubleKills() int32 {
	if m != nil {
		return m.DoubleKills
	}
	return 0
}

func (m *ParticipantStats) GetTripleKills() int32 {
	if m != nil {
		return m.TripleKills
	}
	return 0
}

func (m *ParticipantStats) GetQuadraKills() int32 {
	if m != nil {
		return m.QuadraKills
	}
	return 0
}

func (m *ParticipantStats) GetPentaKills() int32 {
	if m != nil {
		return m.PentaKills
	}
	return 0
}

func (m *ParticipantStats) GetUnrealKills() int32 {
	if m != nil {
		return m.UnrealKills
	}
	return 0
}

func (m *ParticipantStats) GetTotalDamageDealt() int32 {
	if m != nil {
		return m.TotalDamageDealt
	}
	return 0
}

func (m *ParticipantStats) GetMagicDamageDealt() int32 {
	if m != nil {
		return m.MagicDamageDealt
	}
	return 0
}

func (m *ParticipantStats) GetPhysicalDamageDealt() int32 {
	if m != nil {
		return m.PhysicalDamageDealt
	}
	return 0
}

func (m *ParticipantStats) GetTrueDamageDealt() int32 {
	if m != nil {
		return m.TrueDamageDealt
	}
	return 0
}

func (m *ParticipantStats) GetLargestCriticalStrike() int32 {
	if m != nil {
		return m.LargestCriticalStrike
	}
	return 0
}

func (m *ParticipantStats) GetTotalDamageDealtToChampions() int32 {
	if m != nil {
		return m.TotalDamageDealtToChampions
	}
	return 0
}

func (m *ParticipantStats) GetMagicDamageDealtToChampions() int32 {
	if m != nil {
		return m.MagicDamageDealtToChampions
	}
	return 0
}

func (m *ParticipantStats) GetPhysicalDamageDealtToChampions() int32 {
	if m != nil {
		return m.PhysicalDamageDealtToChampions
	}
	return 0
}

func (m *ParticipantStats) GetTrueDamageDealtToChampions() int32 {
	if m != nil {
		return m.TrueDamageDealtToChampions
	}
	return 0
}

func (m *ParticipantStats) GetTotalHeal() int32 {
	if m != nil {
		return m.TotalHeal
	}
	return 0
}

func (m *ParticipantStats) GetTotalUnitsHealed() int32 {
	if m != nil {
		return m.TotalUnitsHealed
	}
	return 0
}

func (m *ParticipantStats) GetDamageSelfMitigated() int32 {
	if m != nil {
		return m.DamageSelfMitigated
	}
	return 0
}

func (m *ParticipantStats) GetDamageDealtToObjectives() int32 {
	if m != nil {
		return m.DamageDealtToObjectives
	}
	return 0
}

func (m *ParticipantStats) GetDamageDealtToTurrets() int32 {
	if m != nil {
		return m.DamageDealtToTurrets
	}
	return 0
}

func (m *ParticipantStats) GetVisionScore() int32 {
	if m != nil {
		return m.VisionScore
	}
	return 0
}

func (m *ParticipantStats) GetTimeCCingOthers() int32 {
	if m != nil {
		return m.TimeCCingOthers
	}
	return 0
}

func (m *ParticipantStats) GetTotalDamageTaken() int32 {
	if m != nil {
		return m.TotalDamageTaken
	}
	return 0
}

func (m *ParticipantStats) GetMagicalDamageTaken() int32 {
	if m != nil {
		return m.MagicalDamageTaken
	}
	return 0
}

func (m *ParticipantStats) GetPhysicalDamageTaken() int32 {
	if m != nil {
		return m.PhysicalDamageTaken
	}
	return 0
}

func (m *ParticipantStats) GetTrueDamageTaken() int32 {
	if m != nil {
		return m.TrueDamageTaken
	}
	return 0
}

func (m *ParticipantStats) GetGoldEarned() int32 {
	if m != nil {
		return m.GoldEarned
	}
	return 0
}

func (m *ParticipantStats) GetGoldSpent() int32 {
	if m != nil {
		return m.GoldSpent
	}
	return 0
}

func (m *ParticipantStats) GetTurretKills() int32 {
	if m != nil {
		return m.TurretKills
	}
	return 0
}

func (m *ParticipantStats) GetInhibitorKills() int32 {
	if m != nil {
		return m.InhibitorKills
	}
	return 0
}

func (m *ParticipantStats) GetTotalMinionsKilled() int32 {
	if m != nil {
		return m.TotalMinionsKilled
	}
	return 0
}

func (m *ParticipantStats) GetNeutralMinionsKilled() int32 {
	if m != nil {
		return m.NeutralMinionsKilled
	}
	return 0
}

func (m *ParticipantStats) GetNeutralMinionsKilledTeamJungle() int32 {
	if m != nil {
		return m.NeutralMinionsKilledTeamJungle
	}
	return 0
}

func (m *ParticipantStats) GetNeutralMinionsKilledEnemyJungle() int32 {
	if m != nil {
		return m.NeutralMinionsKilledEnemyJungle
	}
	return 0
}

func (m *ParticipantStats) GetTotalTimeCrowdControlDealt() int32 {
	if m != nil {
		return m.TotalTimeCrowdControlDealt
	}
	return 0
}

func (m *ParticipantStats) GetChampLevel() int32 {
	if m != nil {
		return m.ChampLevel
	}
	return 0
}

func (m *ParticipantStats) GetVisionWardsBoughtInGame() int32 {
	if m != nil {
		return m.VisionWardsBoughtInGame
	}
	return 0
}

func (m *ParticipantStats) GetSightWardsBoughtInGame() int32 {
	if m != nil {
		return m.SightWardsBoughtInGame
	}
	return 0
}

func (m *ParticipantStats) GetWardsPlaced() int32 {
	if m != nil {
		return m.WardsPlaced
	}
	return 0
}

func (m *ParticipantStats) GetWardsKilled() int32 {
	if m != nil {
		return m.WardsKilled
	}
	return 0
}

func (m *ParticipantStats) GetFirstBloodKill() bool {
	if m != nil {
		return m.FirstBloodKill
	}
	return false
}

func (m *ParticipantStats) GetFirstBloodAssist() bool {
	if m != nil {
		return m.FirstBloodAssist
	}
	return false
}

func (m *ParticipantStats) GetFirstTowerKill() bool {
	if m != nil {
		return m.FirstTowerKill
	}
	return false
}

func (m *ParticipantStats) GetFirstTowerAssist() bool {
	if m != nil {
		return m.FirstTowerAssist
	}
	return false
}

func (m *ParticipantStats) GetFirstInhibitorKill() bool {
	if m != nil {
		return m.FirstInhibitorKill
	}
	return false
}

func (m *ParticipantStats) GetFirstInhibitorAssist() bool {
	if m != nil {
		return m.FirstInhibitorAssist
	}
	return false
}

func (m *ParticipantStats) GetCombatPlayerScore() int32 {
	if m != nil {
		return m.CombatPlayerScore
	}
	return 0
}

func (m *ParticipantStats) GetObjectivePlayerScore() int32 {
	if m != nil {
		return m.ObjectivePlayerScore
	}
	return 0
}

func (m *ParticipantStats) GetTotalPlayerScore() int32 {
	if m != nil {
		return m.TotalPlayerScore
	}
	return 0
}

func (m *ParticipantStats) GetTotalScoreRank() int32 {
	if m != nil {
		return m.TotalScoreRank
	}
	return 0
}

func init() {
	proto.RegisterType((*Match)(nil), "Match")
	proto.RegisterType((*Participant)(nil), "Participant")
	proto.RegisterType((*ParticipantStats)(nil), "ParticipantStats")
}

func init() { proto.RegisterFile("proto/match.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x97, 0xed, 0x76, 0xd3, 0x46,
	0x13, 0xc7, 0x4f, 0x30, 0x0e, 0x64, 0x13, 0x02, 0x59, 0x02, 0xec, 0x03, 0x3c, 0xc1, 0x4d, 0x69,
	0x70, 0x29, 0x0d, 0x10, 0x28, 0xa5, 0x6f, 0x9c, 0x82, 0xcd, 0x8b, 0xdb, 0x04, 0x52, 0xd9, 0x94,
	0xcf, 0x1b, 0x7b, 0xb0, 0xb7, 0x48, 0xbb, 0x3e, 0xab, 0x15, 0x9c, 0xdc, 0x42, 0x6f, 0xa0, 0xf7,
	0xd9, 0x2b, 0xe8, 0x99, 0x59, 0x45, 0x5e, 0xc9, 0x4a, 0xf8, 0x96, 0xf9, 0xcd, 0x7f, 0x46, 0xde,
	0x79, 0x59, 0x29, 0x6c, 0x6d, 0x6a, 0x8d, 0x33, 0x77, 0x13, 0xe9, 0x86, 0x93, 0x6d, 0xfa, 0x7b,
	0xf3, 0x9f, 0x53, 0xac, 0xb9, 0x87, 0x36, 0xbf, 0xcc, 0x16, 0x5f, 0xca, 0x04, 0x7a, 0x5d, 0xb1,
	0xd0, 0x5a, 0x68, 0x37, 0xa2, 0xdc, 0xe2, 0x57, 0xd9, 0xd9, 0x3e, 0xc8, 0xd4, 0xe8, 0x5e, 0x57,
	0x9c, 0x6a, 0x2d, 0xb4, 0x9b, 0x51, 0x61, 0xf3, 0x4d, 0xb6, 0x82, 0xaa, 0x8e, 0x05, 0xe9, 0x94,
	0xd1, 0xa2, 0x41, 0x91, 0x25, 0x76, 0xa4, 0xe9, 0x66, 0xd6, 0x6b, 0x4e, 0x53, 0x8e, 0x12, 0xe3,
	0xf7, 0xd8, 0xca, 0xbe, 0xb4, 0x4e, 0x0d, 0xd5, 0x54, 0x6a, 0x97, 0x8a, 0x66, 0xab, 0xd1, 0x5e,
	0xde, 0x59, 0xd9, 0x0e, 0x60, 0x54, 0x52, 0x70, 0xce, 0x4e, 0x3f, 0x93, 0x3a, 0x15, 0x8b, 0xad,
	0x46, 0xbb, 0x11, 0xd1, 0xdf, 0xf8, 0x4b, 0x31, 0xeb, 0x9e, 0x19, 0x81, 0x38, 0xd3, 0x5a, 0x68,
	0x2f, 0x45, 0x85, 0xcd, 0xd7, 0xf1, 0x98, 0xd3, 0x5e, 0x57, 0x9c, 0xa5, 0xc7, 0x7b, 0xe3, 0x28,
	0x62, 0x70, 0x38, 0x05, 0xb1, 0x34, 0x8b, 0x40, 0x7b, 0xf3, 0xef, 0x53, 0x6c, 0x39, 0x78, 0x24,
	0x9e, 0xa3, 0x9f, 0x25, 0x89, 0xd1, 0x60, 0x5f, 0xcb, 0x04, 0xa8, 0x4a, 0x4b, 0x51, 0x89, 0xf1,
	0xeb, 0x6c, 0xe9, 0xe9, 0x70, 0x68, 0x32, 0xed, 0xf2, 0x62, 0x35, 0xa2, 0x19, 0xe0, 0x2d, 0xb6,
	0xbc, 0x6f, 0xcd, 0x7b, 0x15, 0x43, 0x6f, 0x98, 0x17, 0xab, 0x19, 0x85, 0x88, 0x6f, 0x30, 0x76,
	0x94, 0xaf, 0xd7, 0xa5, 0x4a, 0x35, 0xa2, 0x80, 0xa0, 0xbf, 0x33, 0x91, 0xc9, 0x54, 0x51, 0x37,
	0x9a, 0xde, 0x3f, 0x23, 0xd8, 0xc3, 0x01, 0xc8, 0xa4, 0xd7, 0x15, 0x8b, 0x94, 0x3c, 0xb7, 0x90,
	0xbf, 0x53, 0x5a, 0x83, 0xa5, 0xba, 0x9c, 0x8d, 0x72, 0x8b, 0xdf, 0x62, 0xcd, 0xbe, 0x93, 0x2e,
	0xa5, 0xaa, 0x2c, 0xef, 0xac, 0x85, 0x05, 0x27, 0x47, 0xe4, 0xfd, 0x9b, 0xff, 0xae, 0xb3, 0x0b,
	0x55, 0x1f, 0x66, 0xed, 0x4f, 0x21, 0x8e, 0xef, 0x53, 0x2d, 0x9a, 0x51, 0x6e, 0x15, 0x7c, 0x27,
	0x9f, 0x97, 0xdc, 0xc2, 0xea, 0x24, 0x32, 0x75, 0x60, 0x15, 0xa4, 0xe2, 0x74, 0xab, 0xd1, 0x6e,
	0x46, 0x33, 0x80, 0x1d, 0x8a, 0x32, 0x0d, 0xbe, 0xf9, 0xcd, 0xc8, 0x1b, 0x48, 0x7b, 0x0e, 0x12,
	0xdf, 0xe8, 0x66, 0xe4, 0x0d, 0xa4, 0xbf, 0xab, 0x38, 0x4e, 0xe9, 0x38, 0xcd, 0xc8, 0x1b, 0xf8,
	0xdc, 0x2e, 0x48, 0x37, 0x49, 0xf3, 0x26, 0xe7, 0x16, 0x17, 0xec, 0xcc, 0xd3, 0x34, 0x55, 0xa9,
	0x4b, 0xa9, 0xc9, 0xcd, 0xe8, 0xc8, 0xe4, 0xf7, 0xd8, 0xc5, 0x5d, 0x69, 0xc7, 0x90, 0x3a, 0xcc,
	0xa0, 0xf4, 0xb8, 0x3f, 0xb5, 0x00, 0x82, 0x91, 0xaa, 0xce, 0xc5, 0x6f, 0xb3, 0x0b, 0x39, 0xde,
	0xcb, 0x62, 0xa7, 0xd0, 0x27, 0x96, 0x49, 0x3e, 0xc7, 0xf9, 0x4d, 0x76, 0x2e, 0x8c, 0x4d, 0xc5,
	0x0a, 0x09, 0xcb, 0x90, 0x3f, 0x62, 0x97, 0x77, 0x8d, 0xc6, 0xc8, 0x81, 0x4a, 0xa0, 0x3f, 0x05,
	0xed, 0x76, 0xd5, 0x47, 0xa5, 0xc7, 0xe2, 0x1c, 0xc9, 0x8f, 0xf1, 0xe2, 0x34, 0x75, 0x4d, 0x76,
	0x10, 0x83, 0xaf, 0xc4, 0xaa, 0x9f, 0xa6, 0x00, 0xa1, 0x62, 0x60, 0xd5, 0xf4, 0x48, 0x71, 0xde,
	0x2b, 0x02, 0x84, 0x8a, 0x3f, 0x32, 0x39, 0xb2, 0xd2, 0x2b, 0x2e, 0x78, 0x45, 0x80, 0x70, 0xe2,
	0xf6, 0x41, 0xbb, 0x5c, 0xb0, 0x46, 0x82, 0x80, 0x60, 0x86, 0xb7, 0xda, 0x82, 0x8c, 0xbd, 0x80,
	0xfb, 0x0c, 0x01, 0xc2, 0x8a, 0x0d, 0x8c, 0x93, 0x71, 0x57, 0x26, 0x72, 0x0c, 0x5d, 0x90, 0xb1,
	0x13, 0x17, 0x7d, 0xc5, 0xaa, 0x1c, 0xb5, 0x7b, 0x72, 0xac, 0x86, 0xa1, 0x76, 0xdd, 0x6b, 0xab,
	0x1c, 0x7b, 0xb7, 0x3f, 0x39, 0x4c, 0xd5, 0xb0, 0x9c, 0xfa, 0x92, 0xef, 0x5d, 0x8d, 0x8b, 0xb7,
	0xd9, 0xf9, 0x81, 0xcd, 0x20, 0x54, 0x5f, 0x26, 0x75, 0x15, 0xf3, 0x87, 0xec, 0x52, 0xde, 0xcd,
	0x8e, 0x55, 0x0e, 0xf3, 0xf4, 0x9d, 0x55, 0x1f, 0x40, 0x5c, 0x21, 0x7d, 0xbd, 0x93, 0xff, 0xca,
	0xae, 0x55, 0x4f, 0x34, 0x30, 0x47, 0xdb, 0x99, 0x0a, 0x41, 0xb1, 0x27, 0x49, 0x30, 0x43, 0xf5,
	0x9c, 0x61, 0x86, 0xff, 0xf9, 0x0c, 0x27, 0x48, 0xf8, 0x0b, 0xb6, 0x51, 0x73, 0xf4, 0x30, 0xc9,
	0x55, 0x4a, 0xf2, 0x19, 0x15, 0x7f, 0xc2, 0xae, 0x56, 0x8a, 0x12, 0xe6, 0xb8, 0x46, 0x39, 0x4e,
	0x50, 0xe0, 0xae, 0xd3, 0x41, 0x5f, 0x81, 0x8c, 0xc5, 0x75, 0x92, 0xcf, 0x40, 0x31, 0x13, 0x6f,
	0xb5, 0x72, 0x29, 0x12, 0x18, 0x89, 0xff, 0x07, 0x33, 0x11, 0x70, 0xec, 0xb3, 0x7f, 0x46, 0x1f,
	0xe2, 0xf7, 0x7b, 0xca, 0xa9, 0xb1, 0x74, 0x30, 0x12, 0x1b, 0xbe, 0xcf, 0x35, 0x2e, 0xfe, 0x98,
	0x5d, 0x29, 0xfd, 0xaa, 0x37, 0x07, 0x7f, 0xc1, 0xd0, 0xa9, 0x8f, 0x90, 0x8a, 0x1b, 0x14, 0x75,
	0x9c, 0x9b, 0xef, 0xb0, 0xf5, 0x92, 0x6b, 0x90, 0x59, 0x0b, 0x2e, 0x15, 0x2d, 0x0a, 0xab, 0xf5,
	0xe1, 0x06, 0xfc, 0xa9, 0x52, 0x65, 0x74, 0x7f, 0x68, 0x2c, 0x88, 0x2f, 0xfc, 0x06, 0x04, 0x88,
	0xe6, 0x4e, 0x25, 0xd0, 0xe9, 0x28, 0x3d, 0x7e, 0xe3, 0x26, 0x60, 0x53, 0xb1, 0x99, 0xcf, 0x5d,
	0x19, 0x57, 0x76, 0x65, 0x20, 0x3f, 0x80, 0x16, 0x5f, 0xce, 0xed, 0x0a, 0x71, 0xbe, 0xcd, 0x38,
	0x0d, 0x42, 0x59, 0x7d, 0x93, 0xd4, 0x35, 0x9e, 0xf9, 0x7d, 0xf1, 0x01, 0x5f, 0xd5, 0xed, 0x8b,
	0x8f, 0x28, 0xed, 0x8b, 0x57, 0x6f, 0x55, 0xf7, 0xc5, 0x2b, 0x37, 0x18, 0x7b, 0x69, 0xe2, 0xd1,
	0x73, 0x69, 0x35, 0x8c, 0xc4, 0x2d, 0x7f, 0x4b, 0xcc, 0x08, 0x4e, 0x03, 0x5a, 0x74, 0x7d, 0x89,
	0xb6, 0x9f, 0x86, 0x02, 0xd0, 0x3d, 0x45, 0xc5, 0xf4, 0x77, 0xc8, 0xd7, 0xf9, 0x3d, 0x35, 0x43,
	0x7c, 0x8b, 0xad, 0xf6, 0xf4, 0x44, 0x1d, 0x28, 0x67, 0xac, 0x17, 0xdd, 0x26, 0x51, 0x85, 0x62,
	0x4d, 0xa8, 0x4e, 0x7b, 0x4a, 0xe3, 0x14, 0x22, 0x84, 0x91, 0xf8, 0xc6, 0xd7, 0x64, 0xde, 0x83,
	0xfd, 0x7e, 0x0d, 0x99, 0xb3, 0xd5, 0x88, 0x3b, 0xbe, 0xdf, 0x75, 0x3e, 0xdc, 0xb0, 0x3a, 0x8e,
	0x6f, 0xda, 0xdf, 0x32, 0x3d, 0x8e, 0x41, 0x7c, 0xeb, 0x37, 0xec, 0x64, 0x15, 0x7f, 0xc5, 0x6e,
	0xd4, 0x29, 0x9e, 0x6b, 0x48, 0x0e, 0xf3, 0x44, 0xdb, 0x94, 0xe8, 0x73, 0x32, 0xda, 0x55, 0x3c,
	0x1b, 0x4d, 0x93, 0x35, 0x9f, 0x46, 0x1d, 0xa3, 0x9d, 0x35, 0xb1, 0xbf, 0xe2, 0xee, 0xe6, 0xbb,
	0x7a, 0xac, 0xa2, 0xf8, 0xaa, 0xd8, 0x85, 0x8f, 0x10, 0x8b, 0x7b, 0xbe, 0x7b, 0x33, 0x82, 0xfb,
	0xe4, 0xc7, 0xf9, 0x9d, 0xb4, 0xa3, 0xf4, 0x99, 0xc9, 0xc6, 0x13, 0xd7, 0xd3, 0xf8, 0xa1, 0x24,
	0xee, 0xfb, 0x7d, 0x3a, 0xc6, 0x8d, 0xef, 0xb6, 0xbe, 0x1a, 0x4f, 0xdc, 0x7c, 0xe0, 0x8e, 0x7f,
	0xb7, 0xd5, 0x7b, 0x71, 0x22, 0x08, 0xee, 0xc7, 0x72, 0x08, 0x23, 0xf1, 0xc0, 0x4f, 0x44, 0x80,
	0x0a, 0x45, 0xde, 0xb0, 0x87, 0x81, 0x22, 0xef, 0xd3, 0x16, 0x5b, 0x7d, 0xa1, 0x6c, 0xea, 0x9e,
	0xc5, 0xc6, 0x8c, 0xe8, 0x3d, 0xfd, 0x1d, 0x7d, 0xfb, 0x54, 0x28, 0xee, 0xdc, 0x8c, 0xf8, 0x0f,
	0x03, 0xf1, 0x88, 0x94, 0x73, 0xbc, 0xc8, 0x39, 0x30, 0x9f, 0x80, 0x46, 0x4e, 0x7c, 0x1f, 0xe4,
	0x2c, 0x68, 0x91, 0x93, 0x48, 0x9e, 0xf3, 0x71, 0x90, 0x33, 0xe0, 0x38, 0xb3, 0xc4, 0x4a, 0xa3,
	0x2c, 0x7e, 0x20, 0x75, 0x8d, 0x07, 0x67, 0xb6, 0x4c, 0xf3, 0xfc, 0x3f, 0x52, 0x44, 0xad, 0x8f,
	0xdf, 0x61, 0x6b, 0x1d, 0x93, 0x1c, 0x48, 0xb7, 0x1f, 0xcb, 0x43, 0xb0, 0xfe, 0xa6, 0xfa, 0x89,
	0x6a, 0x36, 0xef, 0xc0, 0x27, 0x14, 0x77, 0x62, 0x18, 0xf0, 0xb3, 0xdf, 0x8a, 0x3a, 0x5f, 0x71,
	0x73, 0x85, 0xfa, 0x5f, 0x82, 0x9b, 0x2b, 0xd4, 0x6e, 0xb1, 0x55, 0x62, 0x64, 0x45, 0x52, 0x7f,
	0x10, 0x4f, 0xfc, 0x36, 0x97, 0xe9, 0xc1, 0x22, 0xfd, 0x8b, 0xf2, 0xe0, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x60, 0xda, 0xd9, 0xb7, 0x0c, 0x00, 0x00,
}
